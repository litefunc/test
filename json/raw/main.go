package main

import (
	"VodoPlay/logger"
	"encoding/json"
)

type S1 struct {
	A json.RawMessage `json:"a"`
	B json.RawMessage `json:"b"`
	C json.RawMessage `json:"c"`
	D json.RawMessage `json:"d,omitempty"`
}

const s = `{"a":{"first":"Janet","last":"Prichard"},"b":47}`
const a = `{
	"auths": {
		"binelogin.azurecr.io": {
			"auth": "YmluZWxvZ2luOkRxVWtiT2dBeEVUK1ZEWFZCQVZmTURyWUF5ZHl5RXVF"
		},
		"noovo-dock.ddns.net:5000": {
			"auth": "cmFuZG9taHViOmdvZ28uc25ha2U="
		},
		"noovo-dock.ddns.net:5002": {
			"auth": "cmFuZG9taHViOmdvZ28uc25ha2U="
		}
	},
	"HttpHeaders": {
		"User-Agent": "Docker-Client/19.03.13 (linux)"
	},
	"b": {
		"b": "b"
	}
}`

func main() {

	var s1 S1
	um([]byte(s), &s1)
	j(s1)

	var a1 Auth
	um([]byte(a), &a1)
	j(a1)
}

func j(o interface{}) {
	logger.Debug(o)
	by, err := json.Marshal(o)
	if err != nil {
		logger.Error(err)
		return
	}
	logger.Debug(string(by))
}

func um(data []byte, o interface{}) {
	logger.Debug(string(data))
	logger.Debug(o)

	if err := json.Unmarshal(data, o); err != nil {
		logger.Error(err)
		return
	}
	logger.Debug(o)
}

type AutoGenerated struct {
	Auths struct {
		BineloginAzurecrIo struct {
			Auth string `json:"auth"`
		} `json:"binelogin.azurecr.io"`
		NoovoDockDdnsNet5000 struct {
			Auth string `json:"auth"`
		} `json:"noovo-dock.ddns.net:5000"`
		NoovoDockDdnsNet5002 struct {
			Auth string `json:"auth"`
		} `json:"noovo-dock.ddns.net:5002"`
	} `json:"auths"`
	HTTPHeaders struct {
		UserAgent string `json:"User-Agent"`
	} `json:"HttpHeaders"`
}

type Auth struct {
	Auths map[string]struct {
		Auth string `json:"auth"`
	} `json:"auths"`
	json.RawMessage `json:",omitempty"`
	// M
}

type M map[string]json.RawMessage
